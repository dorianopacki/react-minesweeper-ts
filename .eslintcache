[{"C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\index.tsx":"1","C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\components\\App\\index.tsx":"2","C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\components\\App\\NumberDisplay\\index.tsx":"3","C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\utils\\index.ts":"4","C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\constans\\index.ts":"5","C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\types\\index.ts":"6","C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\components\\Button\\index.tsx":"7"},{"size":234,"mtime":1607686883866,"results":"8","hashOfConfig":"9"},{"size":5644,"mtime":1607713385730,"results":"10","hashOfConfig":"9"},{"size":409,"mtime":1607703831193,"results":"11","hashOfConfig":"9"},{"size":7015,"mtime":1607707364733,"results":"12","hashOfConfig":"9"},{"size":88,"mtime":1607713508690,"results":"13","hashOfConfig":"9"},{"size":386,"mtime":1607711068321,"results":"14","hashOfConfig":"9"},{"size":1340,"mtime":1607713547688,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"znsp3x",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\index.tsx",[],["32","33"],"C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\components\\App\\index.tsx",[],"C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\components\\App\\NumberDisplay\\index.tsx",[],"C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\utils\\index.ts",["34"],"// import { compileFunction } from \"vm\"\r\nimport React from 'react';\r\nimport {MAX_COLS, MAX_ROWS, NO_OF_BOMBS} from \"../constans\";\r\nimport {Cell, CellValue, CellState} from \"../types\";\r\n\r\nconst grabAllAdjacentCells = (cells: Cell[][], rowParam: number, colParam: number): {\r\n  topLeftCell: Cell | null,\r\n  topCell: Cell | null,\r\n  topRightCell: Cell | null,\r\n  leftCell: Cell | null,\r\n  rightCell: Cell | null,\r\n  bottomLeftCell: Cell | null,\r\n  bottomCell: Cell | null,\r\n  bottomRightCell: Cell | null,\r\n} => {\r\n  const topLeftCell = rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\r\n  const topCell = rowParam > 0 ? cells[rowParam -1][colParam] : null;\r\n  const topRightCell = rowParam > 0 && colParam < MAX_COLS - 1 ? cells[rowParam - 1][colParam + 1] : null;\r\n  const leftCell = colParam > 0 ? cells[rowParam][colParam -1] : null;\r\n  const rightCell = colParam < MAX_COLS - 1 ? cells[rowParam][colParam+1]: null;\r\n  const bottomLeftCell = rowParam < MAX_ROWS - 1 && colParam > 0 ? cells[rowParam + 1][colParam -1] : null;\r\n  const bottomCell = rowParam < MAX_ROWS - 1 ? cells[rowParam+ 1][colParam] : null;\r\n  const bottomRightCell = rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1 ? cells[rowParam + 1][colParam+1] : null;\r\n\r\n return {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell,\r\n  }\r\n}\r\n\r\n\r\nexport const generateCells = (): Cell[][] => {\r\n  let cells: Cell[][] = [];\r\n\r\n  for (let row = 0; row < MAX_ROWS; row++) {\r\n    cells.push([]);\r\n    for (let col = 0; col < MAX_COLS; col++) {\r\n      cells[row].push({\r\n        value: CellValue.none,\r\n        state: CellState.open\r\n      });\r\n    }\r\n  }\r\n  \r\n    let bombsPlaced = 0;\r\n    while (bombsPlaced < NO_OF_BOMBS) {\r\n      const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n      const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n  \r\n      const currentCell = cells[randomRow][randomCol];\r\n      if (currentCell.value !== CellValue.bomb) {\r\n        cells = cells.map((row, rowIndex) =>\r\n          row.map((cell, colIndex) => {\r\n            if (randomRow === rowIndex && randomCol === colIndex) {\r\n              return {\r\n                ...cell,\r\n                value: CellValue.bomb\r\n              };\r\n            }\r\n  \r\n            return cell;\r\n          })\r\n        );\r\n        bombsPlaced++;\r\n      }\r\n    }\r\n\r\n\r\n    for(let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n      for(let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n        const currentCell = cells[rowIndex][colIndex];\r\n        if(currentCell.value === CellValue.bomb) {\r\n          continue;\r\n        }\r\n\r\n        let numberOfBombs = 0;\r\n        const {topLeftCell, topCell, topRightCell, leftCell, rightCell, bottomLeftCell, bottomCell, bottomRightCell} = grabAllAdjacentCells(cells, rowIndex, colIndex);\r\n\r\n\r\n        if(topLeftCell?.value === CellValue.bomb) {\r\n          numberOfBombs++;\r\n        }\r\n\r\n        if(topCell?.value === CellValue.bomb) {\r\n          numberOfBombs++;\r\n        }\r\n\r\n        if(topRightCell?.value === CellValue.bomb) {\r\n          numberOfBombs++;\r\n        }\r\n\r\n        if(leftCell?.value === CellValue.bomb) {\r\n          numberOfBombs++;\r\n        }\r\n\r\n        if(rightCell?.value === CellValue.bomb) {\r\n          numberOfBombs++;\r\n        }\r\n\r\n        if(bottomLeftCell?.value === CellValue.bomb) {\r\n          numberOfBombs++;\r\n        }\r\n        \r\n        if(bottomCell?.value === CellValue.bomb) {\r\n          numberOfBombs++;\r\n        }\r\n\r\n        if(bottomRightCell?.value === CellValue.bomb) {\r\n          numberOfBombs++;\r\n        }\r\n\r\n\r\n        if(numberOfBombs > 0) {\r\n          cells[rowIndex][colIndex] = {\r\n            ...currentCell,\r\n            value: numberOfBombs\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return cells;\r\n};\r\n\r\nexport const openMultipleCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): Cell[][] => {\r\n  const currentCell = cells[rowParam][colParam];\r\n\r\n  if (\r\n    currentCell.state === CellState.visible ||\r\n    currentCell.state === CellState.flaged\r\n  ) {\r\n    return cells;\r\n  }\r\n\r\n  let newCells = [...cells];\r\n  newCells[rowParam][colParam].state = CellState.visible;\r\n\r\n  const {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell\r\n  } = grabAllAdjacentCells(cells, rowParam, colParam);\r\n\r\n  if (\r\n    topLeftCell?.state === CellState.open &&\r\n    topLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    if (topLeftCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1);\r\n    } else {\r\n      newCells[rowParam - 1][colParam - 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\r\n    if (topCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam);\r\n    } else {\r\n      newCells[rowParam - 1][colParam].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    topRightCell?.state === CellState.open &&\r\n    topRightCell.value !== CellValue.bomb\r\n  ) {\r\n    if (topRightCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1);\r\n    } else {\r\n      newCells[rowParam - 1][colParam + 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (leftCell?.state === CellState.open && leftCell.value !== CellValue.bomb) {\r\n    if (leftCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam, colParam - 1);\r\n    } else {\r\n      newCells[rowParam][colParam - 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    rightCell?.state === CellState.open &&\r\n    rightCell.value !== CellValue.bomb\r\n  ) {\r\n    if (rightCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam, colParam + 1);\r\n    } else {\r\n      newCells[rowParam][colParam + 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomLeftCell?.state === CellState.open &&\r\n    bottomLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    if (bottomLeftCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1);\r\n    } else {\r\n      newCells[rowParam + 1][colParam - 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomCell?.state === CellState.open &&\r\n    bottomCell.value !== CellValue.bomb\r\n  ) {\r\n    if (bottomCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam);\r\n    } else {\r\n      newCells[rowParam + 1][colParam].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomRightCell?.state === CellState.open &&\r\n    bottomRightCell.value !== CellValue.bomb\r\n  ) {\r\n    if (bottomRightCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1);\r\n    } else {\r\n      newCells[rowParam + 1][colParam + 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  return newCells;\r\n};\r\n","C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\constans\\index.ts",[],"C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\types\\index.ts",[],"C:\\Users\\User\\Desktop\\JS\\react-minesweeper\\src\\components\\Button\\index.tsx",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":2,"column":8,"nodeType":"41","messageId":"42","endLine":2,"endColumn":13},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]